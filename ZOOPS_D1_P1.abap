REPORT ZOOPS_D1_P1.

"""" OOPS DAY 1 PROG 1 """"
"""" TOPICS - 1) BASIC OOPS, 2)LOCAL CLASS, 3) ATTRIBUTES(INSTANCE, STATIC, CONSTANTS), 4) CREATING OBJECTS AND REFERENCE.

"""" WHY OOPS ?
"""" 1) MORE SUPPORT FOR EVENTS.
"""" 2) FUNCTION MODULE USES FUNCTION GROUP THUS STORES THE DATA INITIALLY.
"""" 3) WHILE METHODS DON'T USE DATA INITIALLY TO BE LOADED INTO DATABASE SO IMPROVES PERFORMANCE.
"""" 4) THUS FUNCTION MODULE HAS IT LOADED INTO MEMORY.


"""" NOTE - CLASS IS COLLECTION OF COMPONENTS. WHATEVER WE DECLARE INSIDE A CLASS WE CALL THEM COMPONENTS.
""""        CLASS IS USER DEFINED DATA TYPE LIKE WHICH IS COLLECTION OF COMPONENTS SIMILAR TO TYPES DECLARATION.
""""        ABAP CLASS ---> ATTRIBUTES + METHODS + EVENTS + INTERFACES + ALIASES + MACROS.






"""" REQUIREMENTS - 1) CREATE A CLASS WHICH CONTAINS ONLY ATTRIBUTE( LIKE A VARIABLE TO STORE DATA. 3 TYPES - 1)INSTANCE 2)STATIC 3)CONSTANTS ).
"""" NOTE         -   1. lOCAL CLASS--> LOCAL TO AN OBJECT (PROGRAM) ---> abap EDITOR (SE38)
""""                  2. GLOBAL CLASS --> GLOBAL TO ALL OBJECTS ----> CLASS BUILDER TOOL (SE24)
""""                                 --> STORED INSIDE CLASS POOL.


**** PROCEDURE FOR CREATING LOCAL CLASS:

****  1. DEFINITION OF CLASS
****    SYNTAX:
****    CLASS  <CLASS NAME>   DEFINITION  [PUBLIC] [PROTECTED] [PRIVATE] 
****            [DEFERRED]  [FINAL]  [LOAD] [ABSTRACT] SECTION.
****      DECLARATION OF COMPONENTS.
****    ENDCLASS.
**** NOTE: IF CLASS DEFINITION CONTAINS METHOD DECLARATIONS, THEN WE NEED TO IMPLEMENT THE CLASS
****  2. IMPLEMENTATION OF CLASS
****    SYNTAX :
****    CLASS <CLASS NAME> IMPLEMENTATION.
****      IMPLEMENTATION OF METHODS.
****    ENDCLASS.
**** NOTE: CLASS DEFINITION AND CLASS IMPLEMENTATION DOESN'T ALLOCATE ANY MEMORY,   IT ONLY PROVIDES TEMPLATE OF THE CLASS.



"""" CREATING LOCAL CLASS.

CLASS LCL_ABC DEFINITION.
  """" NOW NEED TO DECLARED COMPONENTS 1)INSTANCE ATTRIBUTE 2)STATIC 3)CONSTANTS
  """" ANYTHING DECLARED BY DATA KEYWORD IS INSTANCE ATTRIBUTE.
  PUBLIC SECTION.                                  """" CAN BE ACCESSED ANYWHERE.
  DATA X TYPE I. """" INSTANCE ATTRIBUTE.
  CLASS-DATA Y TYPE I. """" STATIC ATTRIBUTE.
  CONSTANTS Z TYPE I VALUE 10.  """" CONSTANTS ATTRIBUTE.

  """" FIRST EVENT HERE IS LOAD OF PROGRAM
  """"  NOTE - WHENEVER THE CLASS IS LOADED INTO THE MEMORY THE SAP WILL ALLOCATE MEMORY FOR STATIC ATTRIBUTE AND CONSTANTS ATTRIBUTE.
ENDCLASS.

"""" CLASS LCL_ABC IMPLEMENTATION.             """" NEEDED ONLY WHEN THERE ARE METHODS IN THE CLASS.
"""" ENDCLASS.

*WRITE :/ X. """" SYNTAX ERROR
*WRITE :/ Y. """" SYNTAX ERROR
*WRITE :/ Z. """" SYNTAX ERROR

*WRITE :/ LCL_ABC->X.    """" SYNTAX ERROR                                  """"" -> ARROW OPERATOR FOR THE REFERENCE AND => IS IMPLIES OPERATOR
*WRITE :/ LCL_ABC=>X.    """" SYNTAX ERROR

*WRITE :/ LCL_ABC->Y.     """" SYNTAX ERROR
WRITE :/ LCL_ABC=>Y.


"""" NOTE WHENEVER USING CLASS NEVER USE ARROR OPERATOR.
WRITE :/ LCL_ABC=>Z.

"""" NOTE - THUS CAN CALL ONLY STATIC AND CONSTANCE ATTRIBUTE.

"""" NOW MEMORY WILL BE ALLOCATED IN THE X ONLY IF WE CREATE OBJECT

WRITE :/ 'FIRST OBJECT OB1...'.

DATA OB1  TYPE REF TO LCL_ABC.        """" CREATING REFERENCE TO THE OBJECT -->REF DOESN'T ALLOCATE ANY MEMORY ITS ALIAS(ADDITION NAME FOR SAME PERSON EG - RAVI ALIAS RAJ SO RAVI HAS ANOTHER NAME RAJ) FOR CLASS.

*OB1-> 5. """" RUNTIME ERROR """" MEMORY NOT ALLOCATED FOR INSTANCE ATTRIBUTE.

CREATE OBJECT OB1.                    """" OBJECT - (ALLOCATES MEMORY FOR INSTANCE ATTRIBUTE).


"""" NOTE - THE MEMORY WILL BE ALLOCATED IMMEDIATELY FOR THE STATIC AND CONSTANTS ATTRIBUTE WHILE FOR INSTANCE ATTRIBUTE NEED TO CREATE OBJECT AFTER GIVING REFERENCE.

WRITE :/ OB1->X.           """" NOW THE INSTANCE ATTRIBUTE WORKS.

"""" NOTE - WHENEVER WE ARE USING CLASS THEN USE =>(IMPLIES) AND WHEN WE ARE USING OBJECT USE ->(ARROW)


WRITE :/ OB1->Y.     """" THIS WORKS SINCE THE OBJECT HAS REFERENCE TO THE MAIN CLASS (LCL_ABC).
WRITE :/ OB1->Z.


OB1->X = 7.
OB1->Y = 20.
*OB1->Z = 30. """" SYNTAX ERROR SINCE CONSTANT.

ULINE.

FORMAT COLOR 1.

WRITE :/ 'OBJECT OB1...',
       / OB1->X, OB1->Y, OB1->Z.
FORMAT COLOR OFF.

FORMAT COLOR 2.

WRITE :/ 'OBJECT OB2...'.
DATA OB2 TYPE REF TO LCL_ABC.

CREATE OBJECT OB2.                  """"" WHENEVER WE CREATE A NEW OBJECT A FRESH INSTANCE WILL BE CREATED FOR NEW INSTANCE ATTRIBUTE.

WRITE :/ OB2->X, OB2->Y, OB2->Z.    """" HERE AGAIN THE VALUE OF X IS 0.

"""" WHEN DO WE GO FOR INSTANCE ATTRIBUTE AND WHEN DO WE GO FOR STATIC ATTRIBUTE?
"""" -> WHEN YOU WANT TO MAINTAIN THE SAME VALUE ACCROSS ALL THE OBJECTS STATIC ATTRIBUTE
"""" -> FOR INSTANCE IT DEPENDS BY USING WHICHEVER OBJECTS YOU ACCESS SO WE GO FOR INSTANCE WHEN WE WANT TO STORE UNIQUE VALUE.
"""" -> THUS INSTANCE IS SPECIFIC TO OBJECT.
"""" -> STATIC CAN BE USED ALONG WITH OBJECT OR CLASS.

FORMAT COLOR OFF.

FORMAT COLOR 3.

OB2->Y = 55.

ULINE.

WRITE :/ 'AFTER CHANGING VALUE OF Y (STATIC ATTRIBUTE) TO 55 IN OBJECT 2'.

WRITE :/ OB1->Y,
         OB2->Y,
         LCL_ABC=>Y.




FORMAT COLOR OFF.
